AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  # Define subnets as parameters to
  # simplify maintenance

  VPCCIDR:
    Type: String
    Default: 10.100.0.0/16

  WebCIDR:
    Type: String
    Default: 10.100.10.0/24

  AppCIDR:
    Type: String
    Default: 10.100.20.0/24

  DBCIDR:
    Type: String
    Default: 10.100.30.0/24

Resources:

  # Network resources

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR

  WebSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref WebCIDR
      VpcId: !Ref VPC

  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref AppCIDR
      VpcId: !Ref VPC

  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref DBCIDR
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Network routing

  InternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref InternetRouteTable

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref WebSubnet

  # Security, instance firewall definitions

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http (port 80) and https (port 443) to web server.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow application traffic from web to app server.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: !Ref WebCIDR

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow application traffic from app to DB server.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          CidrIp: !Ref AppCIDR

  # Server instances

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: WebServer
        - Key: environment
          Value: dev
      InstanceType: t3.nano
      ImageId: ami-0b38d62acce7fb76a
      SubnetId: !Ref WebSubnet
      SecurityGroupIds:
        - !Ref WebSecurityGroup

  AppServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: ProcServer
        - Key: environment
          Value: dev
      InstanceType: t3.nano
      ImageId: ami-0b38d62acce7fb76a
      SubnetId: !Ref AppSubnet
      SecurityGroupIds:
        - !Ref AppSecurityGroup

  MsgServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: MsgServer
        - Key: environment
          Value: dev
      InstanceType: t3.nano
      ImageId: ami-0b38d62acce7fb76a
      SubnetId: !Ref AppSubnet
      SecurityGroupIds:
        - !Ref AppSecurityGroup

  DBServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: DBServer
        - Key: environment
          Value: dev
      InstanceType: t3.nano
      ImageId: ami-0b38d62acce7fb76a
      SubnetId: !Ref DBSubnet
      SecurityGroupIds:
        - !Ref DBSecurityGroup
